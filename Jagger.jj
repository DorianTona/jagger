// Options for JavaCC.
options { LOOKAHEAD=2; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)

import java.util.ArrayList;
import java.util.HashMap;

public class Jagger
{
    static Scope parent = null;
}


PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n" }

// Token specifications.
TOKEN:
{
    //Keywords
    < PRINT: "print" >

|   < IF: "if" >
|   < THEN: "then" >
|   < ELSE: "else" >

|   < LET: "let" >
|   < VAR: "var" >
|   < IN: "in" >
|   < END: "end" >

|   < FUNCTION: "function" >

    //Other tokens
|   < #DIGIT: ["0"-"9"] >                                     // A decimal digit.
|   < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >                  // A decimal number.
|   < STRING: "\"" ((~["\n", "\r", "\""])*)? "\"" >           // string
|   < LRB: "(" >                                              // Left Round Bracket
|   < RRB: ")" >                                              // Right Round BRacket
|   < ID: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","0"-"9"])* >   // variable
|   < ASSIGNMENT: ":=" >
|   < FASSIGNMENT: "=" >
|   < COMMA: "," >
|   < SEMICOLON: ";" >
}

//let var i := 10 in print(i), let var i := i * i in print(i) end, print(i) end
//let var a:=1 in a:=2, print(a) end

// Main loop: read expressions on a line until end of file.
//  mainloop → (statement)* <EOF>
void mainloop():
{ Exp e; }
{
    ( e=statement()
    { new PrettyPrinter(e); System.out.println(); new Eval(e); parent=null; } 
    )* <EOF>
}

//  statement → scope | print(comparison)
Exp statement():
{ Exp e; }
{
    ( 
      e=scope()
    | <PRINT> <LRB> e=comparison() <RRB> { e = new Print(e); }
    )
    { return e; }
}

//  scope → let (declaration)* in instruction (, instruction)* end
Exp scope():
{ Exp a, e; Scope s = new Scope(parent); parent=s; }
{
    <LET>
        (declaration(s))*
    <IN>
        instruction(s) (<COMMA> instruction(s))*
    <END>
    { return s; }
}

//  declaration → (var <ID> := comparison)*
void declaration(Scope s):
{ Token t; Exp e; Function f; }
{
    (
      <VAR> t=<ID> <ASSIGNMENT> e=comparison() { s.addDeclaration(t.toString(), e); }
    | <FUNCTION> f=functionDeclaration() { s.addFunction(f); }
    ) 
}

//  instruction → comparison | statement | variable := comparison
void instruction(Scope s):
{ Exp e; Token t; }
{
    (
      e=statement()
    | t=<ID> <ASSIGNMENT> e=comparison() { e=new Assignment(t.toString(), e, s); }
    | e=comparison()
    )
    { s.addInstruction(e); }
}

//  function → funtion <ID> <LRB> <ID>(, <ID>)*)? <RRB> = statement
Function functionDeclaration():
{ Token t; Exp e; Function f = new Function(parent); }
{
    t=<ID> <LRB> (e=variable() {f.addParam(e);}(<COMMA> e=variable() {f.addParam(e);})*)? <RRB> <FASSIGNMENT> e=statement()
    { 
        f.name = t.toString();
        f.setIns(e);
        return f; 
    }
}

Function functionCall():
{ Token t; Exp e; Function f = new Function(parent); }
{
    t=<ID> <LRB> (e=comparison() {f.addParam(e);}(<COMMA> e=comparison() {f.addParam(e);})*)? <RRB>
    { f.name = t.toString(); return f; }
}

// Comparison operators. Separated to avoid 1>0>1 true (because 1>0=1)
// C -> E ('=='E | '<>'E | '>'E | '<'E | '>='E | '<='E)*
Exp comparison():
{ Exp a,b; }
{
    a=expression()
    (
      "=="  b=expression()  { a = new Equal(a,b); }
    | "<>"  b=expression()  { a = new NonEqual(a,b); }
    | ">"   b=expression()  { a = new Sup(a,b); }
    | "<"   b=expression()  { a = new Inf(a,b); }
    | ">="  b=expression()  { a = new SupEqual(a,b); }
    | "<="  b=expression()  { a = new InfEqual(a,b); }
    )?
    { return a; }
}

// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a,b; }
{
    a=term()
    (
      "+" b=term()  { a = new Add(a,b); }
    | "-" b=term()  { a = new Sub(a,b); }
    )* { return a; }
}


// Term.
// T -> U ('*'T | '/'T)*
Exp term():
{ Exp a,b; }
{
    a=unary()
    (
      "*" b=term() { a = new Mul(a,b); }
    | "/" b=term() { a = new Div(a,b); }
    )* { return a; }
}

// Unary operator.
// U -> ('*'T | '/'T | T)*
Exp unary():
{ Exp a; }
{
    ( "-" a=ternary()   { a = new UnNeg(a); }
    | ("+")? a=ternary()
    ) { return a; }
}

//ternary operators
// T -> ('if' C 'then' C 'else' C | F)
Exp ternary():
{ Exp a,b,c; }
{   
    (
      a=factor()
    | <IF> a=comparison() <THEN> b=comparison() <ELSE> c=comparison() { a = new Ins(a,b,c); } 
    )+ { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | <STRING> | <ID> | "(" E ")"
Exp factor():
{ Token t; Exp e;}
{
    ( t=<NUMBER> { e = new Num(Double.parseDouble(t.toString())); }
    | <LRB> e=comparison() <RRB>
    | t=<STRING> { e = new Chaine(t.toString()); }
    | e=variable()
    | e=functionCall()
    ) { return e; }
}

//has its own function for convenience
Exp variable():
{ Token t; }
{
    t=<ID> { return new Variable(t.toString()); }
}
